// <auto-generated />
using System;
using System.Collections;
using BurseFMI.dbModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Test.Migrations
{
    [DbContext(typeof(BurseFMIContext))]
    [Migration("20211008203152_migg")]
    partial class migg
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Romanian_Romania.1250")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BurseFMI.dbModels.Acordum", b =>
                {
                    b.Property<string>("CodCriteriu")
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_criteriu");

                    b.Property<string>("CodBursa")
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_bursa");

                    b.HasKey("CodCriteriu", "CodBursa")
                        .HasName("acorda_pkey");

                    b.HasIndex("CodBursa");

                    b.ToTable("acorda");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Beneficiaza", b =>
                {
                    b.Property<string>("CodMatricol")
                        .HasColumnType("text")
                        .HasColumnName("cod_matricol");

                    b.Property<string>("CodBursa")
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_bursa");

                    b.Property<BitArray>("CaleFisier")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("bit varying(80)")
                        .HasColumnName("cale_fisier");

                    b.Property<DateTime?>("DataValidare")
                        .HasColumnType("date")
                        .HasColumnName("data_validare");

                    b.Property<string>("NumeFisierDeclAcceptare")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nume_fisier_decl_acceptare");

                    b.HasKey("CodMatricol", "CodBursa")
                        .HasName("beneficiaza_pkey");

                    b.HasIndex("CodBursa");

                    b.ToTable("beneficiaza");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Bursa", b =>
                {
                    b.Property<string>("Cod")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod");

                    b.Property<double?>("Buget")
                        .HasColumnType("double precision")
                        .HasColumnName("buget");

                    b.Property<string>("CodComisie")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_comisie");

                    b.Property<DateTime?>("DataFinal")
                        .HasColumnType("date")
                        .HasColumnName("data_final");

                    b.Property<DateTime?>("DataInceput")
                        .HasColumnType("date")
                        .HasColumnName("data_inceput");

                    b.Property<DateTime?>("DataLimitaContestatie")
                        .HasColumnType("date")
                        .HasColumnName("data_limita_contestatie");

                    b.Property<DateTime?>("DataLimitaRecenzie")
                        .HasColumnType("date")
                        .HasColumnName("data_limita_recenzie");

                    b.Property<DateTime?>("DataLimitaSolicitare")
                        .HasColumnType("date")
                        .HasColumnName("data_limita_solicitare");

                    b.Property<string>("Descriere")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("descriere");

                    b.Property<int?>("NrBurse")
                        .HasColumnType("integer")
                        .HasColumnName("nr_burse");

                    b.Property<double?>("Suma")
                        .HasColumnType("double precision")
                        .HasColumnName("suma");

                    b.Property<string>("Tip")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("tip");

                    b.HasKey("Cod")
                        .HasName("bursa_pkey");

                    b.HasIndex("CodComisie");

                    b.ToTable("bursa");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Comisie", b =>
                {
                    b.Property<string>("CodComisie")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_comisie");

                    b.Property<string>("Nume")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nume");

                    b.HasKey("CodComisie")
                        .HasName("comisie_pkey");

                    b.ToTable("comisie");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Completate", b =>
                {
                    b.Property<string>("CodMatricol")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_matricol");

                    b.Property<string>("AcordGdpr")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("acord_gdpr");

                    b.Property<string>("AlteDetalii")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("alte_detalii");

                    b.Property<int?>("AnInmatriculare")
                        .HasColumnType("integer")
                        .HasColumnName("an_inmatriculare");

                    b.Property<string>("CaleArhiva")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("cale_arhiva");

                    b.Property<string>("CaleExtrasCont")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("cale_extras_cont");

                    b.Property<string>("Cnp")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cnp");

                    b.Property<BitArray>("ContributiiStiintifice")
                        .HasColumnType("bit(1)")
                        .HasColumnName("contributii_stiintifice");

                    b.Property<BitArray>("DiplomePremii")
                        .HasColumnType("bit(1)")
                        .HasColumnName("diplome_premii");

                    b.Property<string>("Iban")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("iban");

                    b.Property<string>("NumeArhivaDocsSociala")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nume_arhiva_docs_sociala");

                    b.Property<string>("NumeFisierExtrasCont")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("nume_fisier_extras_cont");

                    b.Property<string>("TipArhiva")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("tip_arhiva");

                    b.Property<int?>("VenitLunarMembru")
                        .HasColumnType("integer")
                        .HasColumnName("venit_lunar_membru");

                    b.Property<int?>("VenitLunarMembruSecretar")
                        .HasColumnType("integer")
                        .HasColumnName("venit_lunar_membru_secretar");

                    b.HasKey("CodMatricol")
                        .HasName("completate_pkey");

                    b.ToTable("completate");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Contesta", b =>
                {
                    b.Property<string>("CodMatricol")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_matricol");

                    b.Property<string>("CodBursa")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_bursa");

                    b.Property<DateTime?>("DataContestatie")
                        .HasColumnType("date")
                        .HasColumnName("data_contestatie");

                    b.Property<string>("Motiv")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("motiv");

                    b.Property<string>("ObservatiiSefComisie")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("observatii_sef_comisie");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("status");

                    b.HasKey("CodMatricol", "CodBursa")
                        .HasName("contesta_pkey");

                    b.HasIndex("CodBursa");

                    b.ToTable("contesta");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Criteriu", b =>
                {
                    b.Property<string>("CodCriteriu")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_criteriu");

                    b.Property<string>("Descriere")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("descriere");

                    b.HasKey("CodCriteriu")
                        .HasName("criteriu_pkey");

                    b.ToTable("criteriu");
                });

            modelBuilder.Entity("BurseFMI.dbModels.ImportSecretar", b =>
                {
                    b.Property<string>("CodMatricol")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_matricol");

                    b.Property<double?>("MedieAdmitere")
                        .HasColumnType("double precision")
                        .HasColumnName("medie_admitere");

                    b.Property<double?>("MedieBac")
                        .HasColumnType("double precision")
                        .HasColumnName("medie_bac");

                    b.Property<double?>("MedieGenAnAnterior")
                        .HasColumnType("double precision")
                        .HasColumnName("medie_gen_an_anterior");

                    b.Property<double?>("MedieGenSemAnterior")
                        .HasColumnType("double precision")
                        .HasColumnName("medie_gen_sem_anterior");

                    b.HasKey("CodMatricol")
                        .HasName("import_secretar_pkey");

                    b.ToTable("import_secretar");
                });

            modelBuilder.Entity("BurseFMI.dbModels.InfoEvaluareSolicitare", b =>
                {
                    b.Property<string>("CodMatricol")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_matricol");

                    b.Property<string>("CodBursa")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_bursa");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("DataUltimeiRecenzii")
                        .HasColumnType("date")
                        .HasColumnName("data_ultimei_recenzii");

                    b.Property<string>("Observatii")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("observatii");

                    b.HasKey("CodMatricol", "CodBursa", "Email")
                        .HasName("info_evaluare_solicitare_pkey");

                    b.HasIndex("Email");

                    b.ToTable("info_evaluare_solicitare");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Membru", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("CodComisie")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_comisie");

                    b.Property<string>("Functie")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("functie");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nume");

                    b.Property<string>("Prenume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prenume");

                    b.HasKey("Email")
                        .HasName("membru_pkey");

                    b.HasIndex("CodComisie");

                    b.ToTable("membru");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Solicitare", b =>
                {
                    b.Property<string>("CodMatricol")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_matricol");

                    b.Property<string>("CodBursa")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cod_bursa");

                    b.Property<DateTime?>("DataSolicitare")
                        .HasColumnType("date")
                        .HasColumnName("data_solicitare");

                    b.Property<DateTime?>("DataUltimeiModificari")
                        .HasColumnType("date")
                        .HasColumnName("data_ultimei_modificari");

                    b.Property<DateTime?>("DataUltimeiRecenziiSef")
                        .HasMaxLength(50)
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_ultimei_recenzii_sef");

                    b.Property<string>("ObservatiiSecretar")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("observatii_secretar");

                    b.Property<string>("ObservatiiSefComisie")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("observatii_sef_comisie");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("status");

                    b.HasKey("CodMatricol", "CodBursa")
                        .HasName("solicitare_pkey");

                    b.HasIndex("CodBursa");

                    b.ToTable("solicitare");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Specializare", b =>
                {
                    b.Property<string>("Acronim")
                        .HasColumnType("text")
                        .HasColumnName("acronim");

                    b.Property<string>("Domeniu")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("domeniu");

                    b.Property<int?>("NrPromovati")
                        .HasColumnType("integer")
                        .HasColumnName("nr_promovati");

                    b.Property<int?>("NrStudenti")
                        .HasColumnType("integer")
                        .HasColumnName("nr_studenti");

                    b.Property<string>("Nume")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nume");

                    b.Property<string>("ProgramStudii")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("program_studii");

                    b.HasKey("Acronim")
                        .HasName("specializare_pkey");

                    b.ToTable("specializare");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Student", b =>
                {
                    b.Property<string>("CodMatricol")
                        .HasColumnType("text")
                        .HasColumnName("cod_matricol");

                    b.Property<string>("Acronim")
                        .HasColumnType("text")
                        .HasColumnName("acronim");

                    b.Property<int?>("AnCurent")
                        .HasColumnType("integer")
                        .HasColumnName("an_curent");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<int?>("GrupaCurenta")
                        .HasColumnType("integer")
                        .HasColumnName("grupa_curenta");

                    b.Property<string>("InitialaTata")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("initiala_tata");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("nume");

                    b.Property<string>("Prenume")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("prenume");

                    b.HasKey("CodMatricol")
                        .HasName("student_pkey");

                    b.HasIndex("Acronim");

                    b.ToTable("student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Acordum", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Bursa", "CodBursaNavigation")
                        .WithMany("Acorda")
                        .HasForeignKey("CodBursa")
                        .HasConstraintName("acorda_cod_bursa_fkey")
                        .IsRequired();

                    b.HasOne("BurseFMI.dbModels.Criteriu", "CodCriteriuNavigation")
                        .WithMany("Acorda")
                        .HasForeignKey("CodCriteriu")
                        .HasConstraintName("acorda_cod_criteriu_fkey")
                        .IsRequired();

                    b.Navigation("CodBursaNavigation");

                    b.Navigation("CodCriteriuNavigation");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Beneficiaza", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Bursa", "CodBursaNavigation")
                        .WithMany("Beneficiazas")
                        .HasForeignKey("CodBursa")
                        .HasConstraintName("beneficiaza_cod_bursa_fkey")
                        .IsRequired();

                    b.HasOne("BurseFMI.dbModels.Student", "CodMatricolNavigation")
                        .WithMany("Beneficiazas")
                        .HasForeignKey("CodMatricol")
                        .HasConstraintName("beneficiaza_cod_matricol_fkey")
                        .IsRequired();

                    b.Navigation("CodBursaNavigation");

                    b.Navigation("CodMatricolNavigation");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Bursa", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Comisie", "CodComisieNavigation")
                        .WithMany("Bursas")
                        .HasForeignKey("CodComisie")
                        .HasConstraintName("bursa_cod_comisie_fkey");

                    b.Navigation("CodComisieNavigation");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Completate", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Student", "CodMatricolNavigation")
                        .WithOne("Completate")
                        .HasForeignKey("BurseFMI.dbModels.Completate", "CodMatricol")
                        .HasConstraintName("completate_cod_matricol_fkey")
                        .IsRequired();

                    b.Navigation("CodMatricolNavigation");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Contesta", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Bursa", "CodBursaNavigation")
                        .WithMany("Contesta")
                        .HasForeignKey("CodBursa")
                        .HasConstraintName("contesta_cod_bursa_fkey")
                        .IsRequired();

                    b.HasOne("BurseFMI.dbModels.Student", "CodMatricolNavigation")
                        .WithMany("Contestas")
                        .HasForeignKey("CodMatricol")
                        .HasConstraintName("contesta_cod_matricol_fkey")
                        .IsRequired();

                    b.Navigation("CodBursaNavigation");

                    b.Navigation("CodMatricolNavigation");
                });

            modelBuilder.Entity("BurseFMI.dbModels.ImportSecretar", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Student", "CodMatricolNavigation")
                        .WithOne("ImportSecretar")
                        .HasForeignKey("BurseFMI.dbModels.ImportSecretar", "CodMatricol")
                        .HasConstraintName("import_secretar_cod_matricol_fkey")
                        .IsRequired();

                    b.Navigation("CodMatricolNavigation");
                });

            modelBuilder.Entity("BurseFMI.dbModels.InfoEvaluareSolicitare", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Membru", "EmailNavigation")
                        .WithMany("InfoEvaluareSolicitares")
                        .HasForeignKey("Email")
                        .HasConstraintName("info_evaluare_solicitare_email_fkey")
                        .IsRequired();

                    b.HasOne("BurseFMI.dbModels.Solicitare", "Cod")
                        .WithMany("InfoEvaluareSolicitares")
                        .HasForeignKey("CodMatricol", "CodBursa")
                        .HasConstraintName("info_evaluare_solicitare_cod_matricol_cod_bursa_fkey")
                        .IsRequired();

                    b.Navigation("Cod");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Membru", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Comisie", "CodComisieNavigation")
                        .WithMany("Membrus")
                        .HasForeignKey("CodComisie")
                        .HasConstraintName("membru_cod_comisie_fkey");

                    b.Navigation("CodComisieNavigation");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Solicitare", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Bursa", "CodBursaNavigation")
                        .WithMany("Solicitares")
                        .HasForeignKey("CodBursa")
                        .HasConstraintName("solicitare_cod_bursa_fkey")
                        .IsRequired();

                    b.HasOne("BurseFMI.dbModels.Student", "CodMatricolNavigation")
                        .WithMany("Solicitares")
                        .HasForeignKey("CodMatricol")
                        .HasConstraintName("solicitare_cod_matricol_fkey")
                        .IsRequired();

                    b.Navigation("CodBursaNavigation");

                    b.Navigation("CodMatricolNavigation");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Student", b =>
                {
                    b.HasOne("BurseFMI.dbModels.Specializare", "AcronimNavigation")
                        .WithMany("Students")
                        .HasForeignKey("Acronim")
                        .HasConstraintName("student_acronim_fkey");

                    b.Navigation("AcronimNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BurseFMI.dbModels.Bursa", b =>
                {
                    b.Navigation("Acorda");

                    b.Navigation("Beneficiazas");

                    b.Navigation("Contesta");

                    b.Navigation("Solicitares");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Comisie", b =>
                {
                    b.Navigation("Bursas");

                    b.Navigation("Membrus");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Criteriu", b =>
                {
                    b.Navigation("Acorda");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Membru", b =>
                {
                    b.Navigation("InfoEvaluareSolicitares");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Solicitare", b =>
                {
                    b.Navigation("InfoEvaluareSolicitares");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Specializare", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("BurseFMI.dbModels.Student", b =>
                {
                    b.Navigation("Beneficiazas");

                    b.Navigation("Completate");

                    b.Navigation("Contestas");

                    b.Navigation("ImportSecretar");

                    b.Navigation("Solicitares");
                });
#pragma warning restore 612, 618
        }
    }
}
